//example of some shaders compiled
flat basic.vs flat.fs
texture basic.vs texture.fs
depth quad.vs depth.fs
multi basic.vs multi.fs
light basic.vs light.fs
singlepass basic.vs singlepass.fs
normal basic.vs normal.fs
normalmap basic.vs normalmap.fs
uvs basic.vs uvs.fs
metallic basic.vs metallic.fs

\basic.vs

#version 330 core

in vec3 a_vertex;
in vec3 a_normal;
in vec2 a_coord;
in vec4 a_color;

uniform vec3 u_camera_pos;

uniform mat4 u_model;
uniform mat4 u_viewprojection;

//this will store the color for the pixel shader
out vec3 v_position;
out vec3 v_world_position;
out vec3 v_normal;
out vec2 v_uv;
out vec4 v_color;

void main()
{	
	//calcule the normal in camera space (the NormalMatrix is like ViewMatrix but without traslation)
	v_normal = (u_model * vec4( a_normal, 0.0) ).xyz;
	
	//calcule the vertex in object space
	v_position = a_vertex;
	v_world_position = (u_model * vec4( v_position, 1.0) ).xyz;
	
	//store the color in the varying var to use it from the pixel shader
	v_color = a_color;

	//store the texture coordinates
	v_uv = a_coord;

	//calcule the position of the vertex using the matrices
	gl_Position = u_viewprojection * vec4( v_world_position, 1.0 );
}

\quad.vs

#version 330 core

in vec3 a_vertex;
in vec2 a_coord;
out vec2 v_uv;

void main()
{	
	v_uv = a_coord;
	gl_Position = vec4( a_vertex, 1.0 );
}


\flat.fs

#version 330 core

uniform vec4 u_color;

out vec4 FragColor;

void main()
{
	FragColor = u_color;
}


\texture.fs

#version 330 core

in vec3 v_position;
in vec3 v_world_position;
in vec3 v_normal;
in vec2 v_uv;
in vec4 v_color;

uniform vec4 u_color;
uniform sampler2D u_texture;
uniform float u_time;
uniform float u_alpha_cutoff;

out vec4 FragColor;

void main()
{
	vec2 uv = v_uv;
	vec4 color = u_color;
	color *= texture( u_texture, v_uv );

	if(color.a < u_alpha_cutoff)
		discard;

	FragColor = color;
}


\light.fs

#version 330 core

in vec3 v_position;
in vec3 v_world_position;
in vec3 v_normal;
in vec2 v_uv;
in vec4 v_color;

uniform vec4 u_color;
uniform sampler2D u_texture;
uniform sampler2D u_emissive_texture;
uniform sampler2D u_metallic_roughness_texture;
uniform sampler2D u_normal_texture;
uniform float u_time;
uniform float u_alpha_cutoff;
uniform vec3 u_ambient_light;
uniform vec3 u_camera_position;

uniform bool u_is_emissor;
uniform bool u_has_metallic_roughness;
uniform vec3 u_emissive_factor;
uniform int u_light_type;
uniform vec3 u_light_position;
uniform vec3 u_light_vector;
uniform vec3 u_light_color;
uniform float u_light_intensity;
uniform bool u_has_normal;
uniform float u_spot_cosine_cutoff;
uniform float u_spot_exponent;

out vec4 FragColor;

void main()
{
	//texture coordinates
	vec2 uv = v_uv; 
	
	//get color from the texture
	vec4 color = u_color;
	color *= texture( u_texture, v_uv );

	if(color.a < u_alpha_cutoff)
		discard;

	//amount of light
	vec3 light = vec3(0.0);

	//normal
	vec3 N = normalize( v_normal );

	if (u_has_normal)
	{
		vec3 normalmap_texture = texture( u_normal_texture, v_uv ).xyz;
		normalmap_texture = normalmap_texture * 2.0 - vec3(1.0);
		N = abs( normalize(normalmap_texture) );
	}
	
	//select type of light
	vec3 L = vec3(0.0);

	if ( u_light_type == 0)	//directional light
	{
		L = normalize(-u_light_vector);	//same for all pixels
	}
	else	//point and spot light
	{
		//vector from the point to the light
		L = u_light_position - v_world_position;

		//we ignore the light distance for now
		L = normalize(L);

		if ( u_light_type == 1 )	//spot light
		{
			float spotFactor = 1;

			vec3 D = normalize(u_light_vector);
			float spotCosine = dot(D, -L);
			if (spotCosine >= u_spot_cosine_cutoff) { 
				spotFactor = pow(spotCosine,u_spot_exponent);
			} else {
				spotFactor = 0;
			}

			L *= spotFactor;
		}
	}

	//compute how much is aligned
	float NdotL = dot(N,L);
	NdotL = clamp( NdotL, 0.0, 1.0 );

	//store the amount of diffuse light
	light += NdotL * u_light_color;
	light *= u_light_intensity;

	//add ambient light
	light += u_ambient_light;

	if(u_has_metallic_roughness){
		float occlusion = texture( u_metallic_roughness_texture, v_uv ).x;
		light *= occlusion;
	}

	//apply the light to the pixel color 
	vec4 final_color = color;
	final_color.xyz *= light;

	if (u_is_emissor) {
		vec4 emissive = texture( u_emissive_texture, v_uv );
		emissive.xyz *= u_emissive_factor.xyz;
		final_color.xyz += emissive.xyz;
	}

	FragColor = final_color;
}


\singlepass.fs

#version 330 core

in vec3 v_position;
in vec3 v_world_position;
in vec3 v_normal;
in vec2 v_uv;
in vec4 v_color;

uniform vec4 u_color;
uniform sampler2D u_texture;
uniform sampler2D u_emissive_texture;
uniform sampler2D u_metallic_roughness_texture;
uniform sampler2D u_normal_texture;
uniform float u_time;
uniform float u_alpha_cutoff;
uniform vec3 u_ambient_light;
uniform vec3 u_camera_position;

uniform bool u_is_emissor;
uniform bool u_has_metallic_roughness;
uniform vec3 u_emissive_factor;
uniform bool u_has_normal;
uniform float u_spot_cosine_cutoff;
uniform float u_spot_exponent;

const int MAX_LIGHTS = 5;
uniform vec3 u_light_pos[MAX_LIGHTS];
uniform vec3 u_light_color[MAX_LIGHTS];
uniform vec3 u_light_intensity[MAX_LIGHTS];
uniform int u_num_lights;

out vec4 FragColor;

void main()
{
	//texture coordinates
	vec2 uv = v_uv; 
	
	//get color from the texture
	vec4 color = u_color;
	color *= texture( u_texture, v_uv );

	if(color.a < u_alpha_cutoff)
		discard;

	//normal
	vec3 N = normalize( v_normal );

	if (u_has_normal)
	{
		vec3 normalmap_texture = texture( u_normal_texture, v_uv ).xyz;
		normalmap_texture = normalmap_texture * 2.0 - vec3(1.0);
		N = abs( normalize(normalmap_texture) );
	}
	
	//amount of light
	//vec3 light = u_ambient_light;

	vec3 light = vec3(0.0);
	for( int i = 0; i < MAX_LIGHTS; ++i )
	{
		if(i < u_num_lights)
		{
			vec3 L = normalize( u_light_pos[i] - v_world_position);
			float NdotL = clamp( dot(L,N), 0.0, 1.0 );
			light += NdotL * u_light_color[i];
			//light *= u_light_intensity[i];
		}
	}

	if(u_has_metallic_roughness){
		float occlusion = texture( u_metallic_roughness_texture, v_uv ).x;
		light *= occlusion;
	}

	//apply the light to the pixel color 
	vec4 final_color = color;
	final_color.xyz *= light;

	if (u_is_emissor) {
		vec4 emissive = texture( u_emissive_texture, v_uv );
		emissive.xyz *= u_emissive_factor.xyz;
		final_color.xyz += emissive.xyz;
	}

	FragColor = final_color;
}


\multi.fs

#version 330 core

in vec3 v_position;
in vec3 v_world_position;
in vec3 v_normal;
in vec2 v_uv;

uniform vec4 u_color;
uniform sampler2D u_texture;
uniform float u_time;
uniform float u_alpha_cutoff;

layout(location = 0) out vec4 FragColor;
layout(location = 1) out vec4 NormalColor;

void main()
{
	vec2 uv = v_uv;
	vec4 color = u_color;
	color *= texture( u_texture, uv );

	if(color.a < u_alpha_cutoff)
		discard;

	vec3 N = normalize(v_normal);

	FragColor = color;
	NormalColor = vec4(N,1.0);
}


\depth.fs

#version 330 core

uniform vec2 u_camera_nearfar;
uniform sampler2D u_texture; //depth map
in vec2 v_uv;
out vec4 FragColor;

void main()
{
	float n = u_camera_nearfar.x;
	float f = u_camera_nearfar.y;
	float z = texture2D(u_texture,v_uv).x;
	float color = n * (z + 1.0) / (f + n - z * (f - n));
	FragColor = vec4(color);
}


\instanced.vs

#version 330 core

in vec3 a_vertex;
in vec3 a_normal;
in vec2 a_coord;

in mat4 u_model;

uniform vec3 u_camera_pos;

uniform mat4 u_viewprojection;

//this will store the color for the pixel shader
out vec3 v_position;
out vec3 v_world_position;
out vec3 v_normal;
out vec2 v_uv;

void main()
{	
	//calcule the normal in camera space (the NormalMatrix is like ViewMatrix but without traslation)
	v_normal = (u_model * vec4( a_normal, 0.0) ).xyz;
	
	//calcule the vertex in object space
	v_position = a_vertex;
	v_world_position = (u_model * vec4( a_vertex, 1.0) ).xyz;
	
	//store the texture coordinates
	v_uv = a_coord;

	//calcule the position of the vertex using the matrices
	gl_Position = u_viewprojection * vec4( v_world_position, 1.0 );
}


\normal.fs

#version 330 core

in vec3 v_normal;

out vec4 FragColor;

void main()
{
	FragColor = vec4( abs(normalize(v_normal)), 1.0 );
}


\normalmap.fs

#version 330 core

in vec3 v_normal;
in vec2 v_uv;

uniform sampler2D u_normal_texture;
uniform bool u_has_normal;

out vec4 FragColor;

void main()
{
	if (!u_has_normal) {
		discard;
	}

	vec3 normalmap_texture = texture( u_normal_texture, v_uv ).xyz;

	FragColor = vec4(normalmap_texture, 1.0);
}


\uvs.fs

#version 330 core

in vec2 v_uv;

out vec4 FragColor;

void main()
{
	FragColor = vec4(v_uv, 1.0, 1.0);
}


\metallic.fs

#version 330 core

in vec2 v_uv;

uniform sampler2D u_metallic_roughness_texture;
uniform bool u_has_metallic_roughness;
uniform int u_type_property;

out vec4 FragColor;

void main()
{
	if( !u_has_metallic_roughness )
	{
		discard;
	}

	vec2 uv = v_uv;
	float metallic;

	if( u_type_property == 0 ) {		 	 //occlusion
		metallic = texture( u_metallic_roughness_texture, v_uv ).x;
	} else if ( u_type_property == 1) { 	 //metallic
		metallic = texture( u_metallic_roughness_texture, v_uv ).z;
	} else {							     //roughness
		metallic = texture( u_metallic_roughness_texture, v_uv ).y;
	}

	FragColor = vec4(metallic, metallic, metallic, 1.0);
}